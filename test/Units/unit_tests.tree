JBSwapTerminal::accountingContextsOf // paths coverage
├── when called for a project with some contexts
│   ├── it should return the accounting contexts of the project
│   ├── it should include generic accounting contexts
│   └── it shouldn't return empty values at the end of the array
└── when called for a project with no contexts
    ├── it should return the generic accounting contexts
    └── it shouldn't return empty values at the end of the array


JBSwapTerminal::twapParamsOf // paths coverage
├── when there are twap params
│   └── it should return the params
└── when there are no twap params for the project
    ├── when there are default param for the pool
    │   └── it should return the default params
    └── when there are no default param for the pool
        └── it should return empty values


JBSwapTerminal::pay // full branch coverage
├── when tokenIn is the native token
│   ├── it should use weth as tokenIn // test in the uniswap call
│   ├── it should set inIsNativeToken to true // test in the uniswap call
│   ├── it should use msg value as amountIn
│   └── it should pass the benefiaciary as beneficiary for the next terminal
├── when tokenIn is an erc20 token
│   ├── it should use tokenIn as tokenIn // test in the uniswap call
│   ├── it should set inIsNativeToken to false // test in the uniswap call
│   ├── it should use amountIn as amountIn
│   ├── when a msg value is passed along an erc20 token
│   │   └── it should revert
│   ├── when tokenIn uses an erc20 approval
│   │   └── it should use the token transferFrom
│   └── when permit2 data are passed
│       ├── it should use the permit2 call
│       └── when the permit2 allowance is less than the amountIn
│           └── it should revert
├── when a quote is provided
│   ├── it should use the quote as amountOutMin
│   ├── it should use the pool passed
│   └── when the amount received is less than the amountOutMin
│       └── it should revert
├── when no quote is passed
│   ├── it should use the default pool
│   ├── when no default pool is defined
│   │   └── it should revert
│   ├── it should get a twap and compute a min amount
│   └── when the amount received is less than the twap amountOutMin // <-- TODO: implement fix post audit
│       └── it should revert
├── when the token out is the native token
│   ├── it should use weth as tokenOut
│   ├── it should set outIsNativeToken to true
│   ├── it should unwrap the tokenOut after swapping
│   └── it should use the native token for the next terminal pay()
├── when the token out is an erc20 token
│   ├── it should use tokenOut as tokenOut
│   ├── it should set outIsNativeToken to false
│   ├── it should set the correct approval
│   └── it should use the tokenOut for the next terminal pay()
└── when the tokenOut has no terminal defined
    └── it should revert


JBSwapTerminal::uniswapV3SwapCallback // path coverage + boundary
├── when amount0 is positive
│   ├── when shouldWrap is true - token0
│   │   └── it should wrap and send the token0 to the pool
│   └── when shouldWrap is false - token0
│       └── it should send the token0 to the pool
├── when amount1 is positive
│   ├── when shouldWrap is true - token1
│   │   └── it should wrap and send the token1 to the pool
│   └── when shouldWrap is false - token1
│       └── it should send the token1 to the pool
└── when both amounts are 0
    └── it should not transfer anything


// this now became the exact same flow as pay, except for the final call to the next terminal
JBSwapTerminal::addToBalanceOf // path coverage
├── when tokenIn is the native token
│   ├── it should use weth as tokenIn // test in the uniswap call
│   ├── it should set inIsNativeToken to true // test in the uniswap call
│   ├── it should use msg value as amountIn
│   └── it should pass the benefiaciary as beneficiary for the next terminal
├── when tokenIn is an erc20 token
│   ├── it should use tokenIn as tokenIn // test in the uniswap call
│   ├── it should set inIsNativeToken to false // test in the uniswap call
│   ├── it should use amountIn as amountIn
│   ├── when a msg value is passed along an erc20 token
│   │   └── it should revert
│   ├── when tokenIn uses an erc20 approval
│   │   └── it should use the token transferFrom
│   └── when permit2 data are passed
│       ├── it should use the permit2 call
│       └── when the permit2 allowance is less than the amountIn
│           └── it should revert
├── when a quote is provided
│   ├── it should use the quote as amountOutMin
│   ├── it should use the pool passed
│   └── when the amount received is less than the amountOutMin
│       └── it should revert
├── when no quote is passed
│   ├── it should use the default pool
│   ├── when no default pool is defined
│   │   └── it should revert
│   ├── it should get a twap and compute a min amount
│   └── when the amount received is less than the twap amountOutMin // <-- TODO: implement fix post audit
│       └── it should revert
├── when the token out is the native token
│   ├── it should use weth as tokenOut
│   ├── it should set outIsNativeToken to true
│   ├── it should unwrap the tokenOut after swapping
│   └── it should use the native token for the next terminal pay()
├── when the token out is an erc20 token
│   ├── it should use tokenOut as tokenOut
│   ├── it should set outIsNativeToken to false
│   ├── it should set the correct approval
│   └── it should use the tokenOut for the next terminal pay()
└── when the tokenOut has no terminal defined
    └── it should revert


JBSwapTerminal::addDefaultPool // path coverage
├── given the caller is a project owner
│   ├── when adding a pool to its project
│   │   └── it should add the pool to the project owned
│   └── when adding a pool to another project
│       └── it should revert
├── given the caller is not a project owner
│   ├── when the caller has the role
│   │   └── it should add the pool to the project
│   └── when the caller has no role
│       └── it should revert
└── given the caller is the terminal owner
    ├── when adding a default pool
    │   └── it should add the default pool
    └── when adding a pool to a project
        └── it should revert


JBSwapTerminal::addTwapParamsFor // path coverage
├── given the caller is a project owner
│   ├── when setting twap params of its project
│   │   └── it should the params
│   └── when setting twap params to another project
│       └── it should revert
├── given the caller is not a project owner
│   ├── when the caller has the role
│   │   └── it should set the params
│   └── when the caller has no role
│       └── it should revert
└── given the caller is the terminal owner
    ├── when adding default params for a pool
    │   └── it should set the default params
    └── when setting the params of a project
        └── it should revert